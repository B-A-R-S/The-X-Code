# -*- coding: utf-8 -*-
"""mealplan from utb.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L317VjCN2TCHFcHEGhjgXjpbpHcHBGKu
"""

import numpy as np
import pandas as pd

df = pd.read_csv("Meals Dataset.csv")
df

df.corr()['Amount of the main food(Serving size)']

ServingSize = df['Amount of the main food(Serving size)']
df = df.drop(['Amount of the main food(Serving size)'], axis=1)
df['ServingSize'] = ServingSize
df

import matplotlib.pyplot as plt
#Age,Gender,Average Weight (Kg),Meal Type,Recommended Carbohydrate (g),
#plt.scatter(df['Age'], df['ServingSize'])
#plt.xlabel('Age')
#plt.ylabel('ServingSize')
#plt.scatter(df['Gender'], df['ServingSize'])
#plt.ylabel('ServingSize')
#lt.show()
#plt.scatter(df['Average Weight (Kg)'], df['ServingSize'])
#plt.xlabel('Average Weight (Kg)')
#plt.show()
#plt.scatter(df['Average Height (cm)'], df['ServingSize'])
#plt.xlabel('Average Height (cm)')
#plt.ylabel('ServingSize')
#plt.show()
#plt.scatter(df['Level of Activity'], df['ServingSize'])
#plt.xlabel('Level of Activity')
#plt.ylabel('ServingSize')
#plt.show()
###plt.scatter(df['Recommended Calorie'], df['ServingSize'])
###plt.xlabel('Recommended Calorie')
###plt.ylabel('ServingSize')
###plt.show()
#plt.scatter(df['Meal Type'], df['ServingSize'])
#plt.xlabel('Meal Type')
#plt.ylabel('ServingSize')
#plt.show()
#plt.scatter(df['Recommended Carbohydrate (g)'], df['ServingSize'])
#plt.xlabel('Recommended Carbohydrate (g)')
#plt.ylabel('ServingSize')
#plt.show()

df_np = df.to_numpy()
df_np.shape

X_train, y_train = df_np[:, :9], df_np[:, -1]
X_train.shape, y_train.shape
X_train

from sklearn.linear_model import LinearRegression
sklearn_model = LinearRegression().fit(X_train, y_train)
sklearn_y_predictions = sklearn_model.predict(X_train)
sklearn_y_predictions

from sklearn.metrics import mean_absolute_error, mean_squared_error
mean_absolute_error(sklearn_y_predictions, y_train), mean_squared_error(sklearn_y_predictions, y_train)

df.corr()['ServingSize']

predictions_df = pd.DataFrame({'Age': df['Age'],
                               'Gender': df['Gender'],
                               'Average Weight (Kg)': df['Average Weight (Kg)'],
                               'Average Height (cm)': df['Average Height (cm)'],
                               'Level of Activity': df['Level of Activity'],
                               #'Recommended Calorie': df['Recommended Calorie'],
                               'Meal Type': df['Meal Type'],
                               'Recommended Carbohydrate (g)': df['Recommended Carbohydrate (g)'],
                               'ServingSize': df['ServingSize'],
                               'Sklearn ServingSize Predictions':sklearn_y_predictions})
predictions_df

def get_predictions(model, X):
  '''
  Obtain the predictions for the given model and inputs.

  model: np.array of Floats with shape (p,) of parameters
  X: np.array of Floats with shape (n, p-1) of inputs
  
  Returns: np.array of Floats with shape (n,).
  '''

  (n, p_minus_one) = X.shape
  p = p_minus_one + 1

  new_X = np.ones(shape=(n, p))
  new_X[:, 1:] = X

  return np.dot(new_X, model)

test_model = np.array([1, 1/4, 1/3, 1.2, 0, 0, 0, 0, 0, 0])
get_predictions(test_model, X_train).shape

predictions_df['Test Predictions'] = get_predictions(test_model, X_train)
predictions_df

mean_absolute_error(predictions_df['Test Predictions'], y_train)

from numpy.linalg import inv

def get_best_model(X, y):
  '''
  Returns the model with the parameters that minimize the MSE.

  X: np.array of Floats with shape (n, p-1) of inputs
  y: np.array of Floats with shape (n,) of observed outputs

  Returns: np.array of shape (p,) representing the model.
  '''

  (n, p_minus_one) = X.shape
  p = p_minus_one + 1

  new_X = np.ones(shape=(n, p))
  new_X[:, 1:] = X

  return np.dot(np.dot(inv(np.dot(new_X.T, new_X)), new_X.T), y)

best_model = get_best_model(X_train, y_train)
predictions_df['Best Predictions'] = get_predictions(best_model, X_train)
predictions_df

mean_absolute_error(predictions_df['Best Predictions'], y_train), mean_squared_error(predictions_df['Best Predictions'], y_train)

from sklearn.metrics import r2_score

r2_score(y_train, sklearn_y_predictions)

# Get user input for the independent variables
age = int(input("Enter your age: "))
gender = int(input("Enter your gender (1 for female, 2 for male): "))
height = float(input("Enter your height in cm"))
weight = float(input("Enter your weight in kg"))
LevelofActivity = int(input("Enter your Level of Activity (1 for Light, 2 for Moderate, 3 for High): "))
RecommendedCalorie = float(input("Enter your Recommended Calorie"))
MealType = int(input("Enter your meal type: "))
RecommendedCarbohydrate  = int(input("Enter your Recommended Carbohydrate (g): "))
Recommended = int(input("Enter your rec meal: "))
#calories = int(input("Enter the number of calories you need to burn per 30 minutes: "))

# Make predictions on the user input
#user_input = np.array([age, gender,weight, height,LevelofActivity, RecommendedCalorie, MealType, RecommendedCarbohydrate, Recommended ]).reshape(1, -1)
#user_input_df = pd.DataFrame(user_input, columns=X_train.columns)
column_names = ['age', 'gender', 'weight', 'height', 'level_of_activity', 'recommended_calorie', 'meal_type', 'recommended_carbohydrate', 'recommended']
user_input_df = pd.DataFrame(user_input, columns=column_names)

predicted_ServingSize = sklearn_model.predict(user_input_df)

# Print the predicted exercise
print("Recommended Serving Size:", predicted_ServingSize[0])