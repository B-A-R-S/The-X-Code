# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I5wqZnnyy8OwMRMQbZI-G5oR_RtoSk_8
"""

# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1G9xBGBIlLKYmXmqmG7B0C24yT2VYDSgW
"""

# Importing necessary libraries
import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# Load the meals dataset
meals_df = pd.read_csv("MEAL_DATA.csv")

print("****Checking the structure and the distribution of the dataframe****")
# Checking for the structure
print(meals_df.info())

# Checking for distribution
print(meals_df.describe())

# prints the entire DataFrame
print(meals_df)

# Select the predictor variables and the response variable
X = meals_df[['Age', 'Gender', 'Average Weight (Kg)', 'Average Height (cm)', 'Level of Activity', 'Meal Type', 'Menu No', 'Recommended Calorie ', 'Recommended Total Carbohydrate(g)', 'Recommended Carbohydrate (g)', ]]
y = meals_df['Serving Size']

print("****Checking the independent variables****")
# Have a glance at the independent variables
print(X)
print("****Checking the dependent variable****")
# Have a glance at the dependent variable
print(y)

# Split the data into training and testing sets
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Scale the input variables
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

print("****Checking the dependent variable****")

# Have a glance at the shape of the train and test sets
print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

# Fit a Random Forest regression model to the training data
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Convert the Random Forest model to a Keras model
keras_model = Sequential()
keras_model.add(Dense(units=32, input_dim=X_train.shape[1], activation='relu'))
keras_model.add(Dense(units=1))

# Compile the Keras model
keras_model.compile(optimizer='adam', loss='mean_squared_error')

# Train the Keras model
keras_model.fit(X_train, y_train, epochs=50, batch_size=32)

# Save the Keras model
keras_model.save('random_forest.h5')
# Comparing the predicted value to the actual value
print("****Comparing the predicted value to the actual value****")
y_pred = model.predict(X_test)
comparison_df = pd.concat([y_test.reset_index(drop=True), pd.DataFrame(y_pred, columns=['Predicted'])], axis=1)
print(comparison_df)
######

# Get the mean of the target variable in the training set
y_mean = np.mean(y_train)

# Make predictions with the trained model
y_pred = model.predict(X_test)

# Calculate the mean absolute error (MAE) of the predictions
mae = np.mean(np.abs(y_pred - y_test))

# Calculate the mean absolute percentage error (MAPE) of the predictions
mape = np.mean(np.abs((y_pred - y_test) / y_test)) * 100

# Calculate the bias of the model
bias = np.abs(y_mean - np.mean(y_pred))

# Print the evaluation metrics and bias
print("MAE:", mae)
print("MAPE:", mape)
print("Bias:", bias)

# Evaluate the model on the test data
y_pred = model.predict(X_test)
print("R-squared:", r2_score(y_test, y_pred))
print("Mean Squared Error (MSE):", mean_squared_error(y_test, y_pred))
print("Root Mean Squared Error (RMSE):", mean_squared_error(y_test, y_pred, squared=False))
print("Mean Absolute Error (MAE):", mean_absolute_error(y_test, y_pred))


# Ask the user to input values for a new data point
#should extract the user account details for meal type and menu
Age = float(input("Enter your age: "))
Gender = float(input("Enter your gender(1 = Female / 2 = Male): "))
Weight = float(input("Enter weight in kgs: "))
Height  = float(input("Enter height in cm: "))
Level_of_Activity = float(input("How active are you (1 = light / 2 = Moderate / 3 = Extream): "))
Meal_Type = float(input("Enter your meal type(1= Breakfast / 2 = MorningSnack 3= Lunch / 4 = MorningSnack 5 = Dinner): "))
Menu_No  = float(input("Choose the menu no: "))

#calculating necc

# Calculate the "Recommended Calorie" using a Mifflin St Jeor equations
if Gender == '2':
        bmr = 10 * Weight + 6.25 * Height - 5 * Age + 5
else:
        bmr = 10 * Weight + 6.25 * Height - 5 * Age - 161

if Level_of_Activity == '1':
        rec_cal = bmr * 1.375
elif Level_of_Activity == '2':
        rec_cal = bmr * 1.55
else:
        rec_cal = bmr * 1.725

     

# Calculate "Recommended Total Carbohydrate(g)" using the American Diabetes Association (ADA) Recommendations
rec_tot_carb = rec_cal * 0.45  * 0.25

# Calculate "Recommended Carbohydrate (g)" using the American Diabetes Association (ADA) Recommendations
if Age >= 3:
    if Meal_Type in [1, 3, 5]:
      carb_percent = 0.30
    else: 
      carb_percent = 0.05
elif Age >= 4 and Age <= 8:
    if Meal_Type in [1, 3, 5]:
          carb_percent = 0.29
    else: 
            carb_percent = 0.07
elif Age >= 9 and Age <= 13:
        if Meal_Type in [1, 3, 5]:
          carb_percent = 0.28
        else: 
            carb_percent = 0.08
else:
    if Meal_Type in [1, 3, 5]:
          carb_percent = 0.26
    else:
            carb_percent = 0.11
    
rec_carb = rec_tot_carb * carb_percent

#####Not Needed for the selected  one
# Create a dictionary for the new data point with the calculated features
new_data = {'Age': Age, 
            'Gender': Gender,
            'Average Weight (Kg)': Weight, 
            'Average Height (cm)': Height,  
            'Level of Activity': Level_of_Activity, 
            'Meal Type': Meal_Type, 
            'Menu No': Menu_No,
            'Recommended Calorie': rec_cal, 
            'Recommended Total Carbohydrate(g)': rec_tot_carb, 
            'Recommended Carbohydrate (g)': rec_carb}
           



# Make prediction for new data point
X_new = pd.DataFrame([new_data])
y_new = model.predict(X_new)

# Print the predicted Serving Size
print("Predicted Serving Size: ",y_new)

# Ask the user if they want to print additional features
print_additional_data = input("Do you want to know your Recommended Calorie and Recommended Carbohydrate amount? (yes or no): ")
if print_additional_data.lower() == 'yes':
 print("Recommended Calorie Per Day: ",rec_cal)
 print("Recommended Total Carbohydrate(g) Per Day: ",rec_tot_carb)
 print("Recommended Carbohydrate(g) for the Selected Meal: ",rec_carb)