# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nzp9qJhHoHZWmGls30IbLaB3vSVAPUQ_
"""

import numpy as np
import pandas as pd

df = pd.read_csv("Meals Dataset.csv")
df

df.corr()['Amount of the main food(Serving size)']

ServingSize = df['Amount of the main food(Serving size)']
df = df.drop(['Amount of the main food(Serving size)'], axis=1)
df['ServingSize'] = ServingSize
df

import matplotlib.pyplot as plt

df_np = df.to_numpy()
df_np.shape

X_train, y_train = df_np[:, :3], df_np[:, -1]
X_train.shape, y_train.shape
X_train

from sklearn.linear_model import LinearRegression
sklearn_model = LinearRegression().fit(X_train, y_train)
sklearn_y_predictions = sklearn_model.predict(X_train)
sklearn_y_predictions

from sklearn.metrics import mean_absolute_error, mean_squared_error
mean_absolute_error(sklearn_y_predictions, y_train), mean_squared_error(sklearn_y_predictions, y_train)

df.corr()['ServingSize']

predictions_df = pd.DataFrame({'Age': df['Age'],
                               'Gender': df['Gender'],
                               'Average Weight (Kg)': df['Average Weight (Kg)'],
                               'Average Height (cm)': df['Average Height (cm)'],
                               'Level of Activity': df['Level of Activity'],
                               #'Recommended Calorie': df['Recommended Calorie'],
                               'Meal Type': df['Meal Type'],
                               'Recommended Carbohydrate (g)': df['Recommended Carbohydrate (g)'],
                               'ServingSize': df['ServingSize'],
                               'Sklearn ServingSize Predictions':sklearn_y_predictions})
predictions_df

def get_predictions(model, X):
  '''
  Obtain the predictions for the given model and inputs.

  model: np.array of Floats with shape (p,) of parameters
  X: np.array of Floats with shape (n, p-1) of inputs
  
  Returns: np.array of Floats with shape (n,).
  '''

  (n, p_minus_one) = X.shape
  p = p_minus_one + 1

  new_X = np.ones(shape=(n, p))
  new_X[:, 1:] = X

  return np.dot(new_X, model)

test_model = np.array([1, 1/4, 1/3, 1.2])
get_predictions(test_model, X_train).shape

predictions_df['Test Predictions'] = get_predictions(test_model, X_train)
predictions_df

mean_absolute_error(predictions_df['Test Predictions'], y_train)

from numpy.linalg import inv

def get_best_model(X, y):
  '''
  Returns the model with the parameters that minimize the MSE.

  X: np.array of Floats with shape (n, p-1) of inputs
  y: np.array of Floats with shape (n,) of observed outputs

  Returns: np.array of shape (p,) representing the model.
  '''

  (n, p_minus_one) = X.shape
  p = p_minus_one + 1

  new_X = np.ones(shape=(n, p))
  new_X[:, 1:] = X

  return np.dot(np.dot(inv(np.dot(new_X.T, new_X)), new_X.T), y)

best_model = get_best_model(X_train, y_train)
predictions_df['Best Predictions'] = get_predictions(best_model, X_train)
predictions_df

mean_absolute_error(predictions_df['Best Predictions'], y_train), mean_squared_error(predictions_df['Best Predictions'], y_train)

from sklearn.metrics import r2_score

r2_score(y_train, sklearn_y_predictions)